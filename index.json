[{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://otto-eboxi.github.io/tutorials/example/","section":"tutorials","title":"Compose Docs"},{"body":"Just an example of an additional docs folder.\nSurprised that it doesn't have a left sidebar menu? Worry not; just follow this instructions to enable it.\nTutorials Back to docs ","link":"https://otto-eboxi.github.io/tutorials/","section":"tutorials","title":"Tutorials' Docs"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://otto-eboxi.github.io/tutorials/example/mermaid/","section":"tutorials","title":"Mermaid"},{"body":"","link":"https://otto-eboxi.github.io/blog/","section":"blog","title":"Blog"},{"body":" Intro Just a blog to keep track of some of the things I am working on.\nYou can generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown using mermaid.\nOr, generate graphs, charts and tables from a csv, or a json file.\n","link":"https://otto-eboxi.github.io/","section":"","title":"Eboxi"},{"body":"Test post. Use the command xxxx hugo new blog/title.md and more\n","link":"https://otto-eboxi.github.io/blog/maiatest/","section":"blog","title":"MaiaTest"},{"body":"Summary Still a work in progres. Solar monitor mainly written in python running on Raspberry Pi.\nThe idea is to only use local devices (no external server): Raspberri Pi as local server and ESP's as nodes.\n","link":"https://otto-eboxi.github.io/blogiot/solarmonitor/","section":"blogiot","title":"A python solar logger and monitor"},{"body":"Summary Still a work in progres. The idea is to monitor the solar generation and load scheduling and, based on the prediction, optimize the scheduleling of the high power loads, e.g. geyser and pool pump.\nThe idea is to only use local devices (no external server): Raspberri Pi as local server and ESP's as nodes.\n","link":"https://otto-eboxi.github.io/blogiot/solaroptimizer/","section":"blogiot","title":"A solar power optimizer"},{"body":"Exploring power optimization using IOT.\nSolar Monitor\nSolar Optimizer\n","link":"https://otto-eboxi.github.io/blogiot/","section":"blogiot","title":"Blog IOT"},{"body":"A simple way to replace the B\u0026amp;O filament lamps with LED's\nBackground (Note this was first published on beoworld.org in 2021 but they removed the old posts) Like a lot older B\u0026amp;O systems, the Beomaster 4000 uses filament lamps. In most of the vintage B\u0026amp;O's these lamps are soldered but the lamps in the Beomaster 4000 fits into a holder. An ideal replacement would be LED's that directly fit into these holders. One additional factor to keep in mind is that the power lamp (red) runs from 22V AC while the other lamps run from 13-14V DC.\nDisassembled lamp. Normally you will not remove the complete shell on the right, you will simply pull out the holder in the middle from the inside. The lamp will come out with it. In this case removing took some effort after 40+ years and therefore the complete holder was removed.\nMechanical fit of LED replacements After several failures I have settled on using a cutoff pcb and SMD (surface mount) components. Most PCBs are 1.6mm thick but the slot for the lamp is about 2.3mm. The PCB will therefore need some \u0026quot;thickening\u0026quot;. I have used 2 different approaches below.\nResistor Calculations To limit the current some resistances are needed. Also keep in mind that the dissipation of resistances are limited and must be taken into account in this application. The calculations are shown below.\nLED selection Surface mount LED's come in different sizes. Most of them are rated 20-25mA maximum. Any one of these can be used. The color obviously depends on the color of the lamp, most are red except for the stereo lamp which is green. If you only have white LED's available, these can also be used.\nComment: I have tried using 5mm through hole LEDs because they are more readily available but eventually gave up because the fit is to tight. 22V ac lamp replacement\nResistor selection The power rail is 22V ac. The LED design should limit the current to the LED's to \u0026lt;20mA (preferably about 10-14mA) using a resistor that can dissipate the heat.\nAssuming the voltage drop across the LED is about 2V and assume the RMS voltage is still 22V (a bit more complex due to halfwave rectification but wiil ignore that for this calculation), and the current is 10mA: R = V/I = (22-2)/10mA = 2k ohm\nThe dissipation through the resistor will then be: P = VI = 20*10mA = 200mW\nThe maximum power dissipation for common SMD resistor sizes: Imperial Metric Watt 0603 1608 1/10 (0.10) 0805 2012 1/8 (0.125) 1206 3216 1/4 (0.25)\nAC lamp From the table a 1206 SMD resistor should be able to handle the power, but taking into account that this rating is applicable in free air movement @ 25C, it is better to select a larger resistor size or use 2 x 1k in series. The advantage of 2 in series is that it is easier to get 1k resistors. Combining it, the final PCB looks like this:\nMy LED build (sorry, soldering is not great)\nNote the 2 LED's back to back which will each light up in one of the 2 half cycles of the 50Hz AC.\nI used vero board but any old pcb, e.g. old PC card, with an edge connector can be cut for this purpose.\nNote that I have one resistor on each side of the LEDs.\nNot shown is a thin shim (about 1mm) glued to the bottom to get the thickness right.\nDC lamps (13-14Vdc) Similar to the calculations above: R = V/I = 11/10mA = 1.1 kilo ohm\nTo make it simpler, select 1k resistor for this one as well.\nThe dissipation through the resistor will then be about: P = VI = 10*11mA = 110mW\nSo one SMD 1206 1k ohm resistor should do it. If you need a brighter display, you can also add more LED's in series. (You can reduce the resistor to 680 or 820 ohm for 2 LED's in series but 1k should still be fine)\nNote that in this case the LED orientation is important. If it does not work the first time, switch the orientation.\nThe DC LED PCB. Note that this pcb was not shimmed. I used thin wires, that folds under the pcb. This ensures much better contact with the socket.\nLED fitted into holder.\n","link":"https://otto-eboxi.github.io/blog/beomaster4000lamps/","section":"blog","title":"Beomaster 4000 Lamp Replacement"},{"body":"Fixing the power switch\n(This is just a copy of the text original published on the Beoworld that was unfortunately removed)\nA broken switch often starts off with some intermittent on/off switching. Normally the resistance across the switch contacts is higher than expected (less than about 2-3 ohm I would guess is normal) or vary a lot (5-25 ohm in my case).\nUnfortunately replacements are not available, unless you can find a second hand one. You can also try and hack a different switch in there but it is not going to be easy.\nIn this case I have decided to repair it.\nStep 1: Remove the switch https://forum.beoworld.org/blogs/beomaster_4000_restore/archive/2021/12/04/beomaster-4000-power-switch-removal.aspx\nStep 2: Open the top of the switch\nThe switch is held together with 4 plastic rivets that runs through the switch housing. The rivets were melted on the one side to keep the switch together. Simply cut the melted part flush with the PCB using a sharp blade.\nStep 3: Remove the plastic rivets\nFrom the opposite side, remove the plastic rivets carefully by lifting them slightly with a blade and then pulling them out\nDisassembled with rivets removed\nStep 4: Remove contacts and PCB frame\nHere you can see the damage on the contacts\nStep 5: Cleaning up the moving contacts\nJust to be clear, fixing contacts by filing them off is a last resort and not ideal.\nThese copper contact area must be cleaned and the surface restored. The copper plates can be removed from the carried frame while cleaning but I simply left them in place. With extreme damage you can make new copper contacts from copper plate.\nI clamped the copper plates in a vice with soft jaws and restored the surface in 4 steps a) file with a fine needle file b) file with a diamond file (if you have a Leatherman, some of them have diamond files or you can raid your partners makeup bag for a fine nail file) c) 1000 emery paper d) microfiber or abrasive cloth. Do take your time to do this because a better surface will last longer. Photo below is halfway through the cleanup.\nWhen done I place a bit of Deoxit on each contact with a earbud.(I prefer using an earbud to avoid getting any chemicals on the old PCBs)\nStep 6: Fixing up the static contacts\nThe static contacts also needed to be cleaned. It is possible to file them as well but since they are symmetrical, I decided to simply flip them around and use the other side. This is done by removing them from the PCB. First remove all the solder and then pull them out or alternatively pull them out with a tweezers while heating them with the soldering iron.They can now be flipped and inserted into the opposite hole.\nStep 7: Assembly 1\nAssemble the 2 parts separately as shown below. Use masking tape to make sure everything stays in place Make sure you insert the moving contacts and frame the correct way around. If the shell can not close properly, start again and make sure that the sliding contact frame is aligned with the slot in the housing and in the top PCB\nStep 8: Join the 2 parts together\nWhen joining the 2 sub-assemblies, take care to ensure that the bump on the white plastic slider is aligned and fits into the slot of the contact frame. (This is where the plastic slider grips to move the frame and copper contacts when switching.)\nThe long copper strips from the top contacts should also slot into the rectangular slots on the bottom PCB. Normally a bit of wiggling is needed to get them into the holes.\nStep 9:\nBefore closing, test the switch by measuring it with a multimeter. Counter intuitively the contacts are closed (zero resistance) when the switch is out (normal position when not mounted in the frame). Measure both contacts. The resistance should be close to 0 ohm (\u0026lt; 1 ohm). (you should subtract the resistance of the leads which is about 0.4 ohm in my setup)\nStep 10: insert the plastic rivets\nI used a cable tie to keep the shell together and then inserted the plastic rivets again. I insert 2 rivets from one side (green circles) and 2 from the other side and did not melt them. I left the cable tie to enable disassembly if I have to open it again.\nPosted Sat, Dec 4 2021 10:25 AM by OttoES Filed under: power switch, Beomaster 4000\n","link":"https://otto-eboxi.github.io/blog/beo4swfix/","section":"blog","title":"Beomaster 4000 Power Switch Repair"},{"body":"Removing the power switch\n(This is just a copy of the text original published on the Beoworld that was unfortunately removed)\nThe power switch on some of the Beomaster's tend to fail. I could not find instructions how to remove it anywhere, so in case it will help anyone this is how I removed mine.\nStep 1:Open the unit, remove and disassemble the front panel\nThe front panel is tricky because its got lots of screws and some are hidden and in difficult positions (maybe I will do a post about it later)\nStep 2: remove the plastic shell over the switch\nStep 3: Bent the 4 metal tabs holding the switch in place at the bottom\nStep 4: Remove the switch This is the most difficult part. The switch-PCB is partially wedged between the metal rack and the other PCB (as can be seen in the photo above.) It was removed by desoldering the first switch on the other PCB to allow some flex in the PCB. (some might say you should desolder all the switches but there were just to many)\nThe Switch was then rotated slightly (clock wise on the photo) to first dislodge it on the right and slowly wiggled out (it took me about 5 minutes just to wiggle it out) This must be done with great care since both PCB can easily break.\nThe green circle indicates where the switch PCB should slide past the other PCB. The red circle shows that with a slight rotation the switch PCB can just clear the metal tab to slide to the right.\nStep5: Removed switch:\nDesolder the wires (can also do it earlier)\nPosted Sat, Dec 4 2021 9:07 AM by OttoES Filed under: power switch, Beomaster 4000\n","link":"https://otto-eboxi.github.io/blog/beo4swremove/","section":"blog","title":"Beomaster 4000 Power Switch Removal"},{"body":"","link":"https://otto-eboxi.github.io/categories/","section":"categories","title":"Categories"},{"body":"","link":"https://otto-eboxi.github.io/tags/","section":"tags","title":"Tags"}]